let CONSTANTS={PAGES:{PROFILE:"profile",ARTICLES:"articles",MUMBLES:"mumbles",TIMELINE:"timeline",PHOTOS:"photos"},PAGINATION:{DEFAULT_PAGE_SIZE:10,DEFAULT_PAGE_NUM:1,MAX_VISIBLE_PAGES:5},BREAKPOINTS:{MOBILE:480,TABLET:768,DESKTOP:1024},DELAYS:{LOADING:500,API_MOCK:1e3,UPLOAD:2e3,TOAST_AUTO_HIDE:4e3,TOAST_HIDE_ANIMATION:300},RECORDING:{MAX_DURATION:600,MIN_DURATION:1,AUDIO_TYPE:"audio/webm;codecs=opus",FALLBACK_TYPE:"audio/wav",UPDATE_INTERVAL:100},MESSAGE_TYPES:{SUCCESS:{type:"success",icon:"fa-check-circle",color:"#059669",bgColor:"#ffffff",borderColor:"#10b981",textColor:"#065f46"},ERROR:{type:"error",icon:"fa-times-circle",color:"#dc2626",bgColor:"#ffffff",borderColor:"#ef4444",textColor:"#7f1d1d"},WARNING:{type:"warning",icon:"fa-exclamation-triangle",color:"#d97706",bgColor:"#ffffff",borderColor:"#f59e0b",textColor:"#92400e"},INFO:{type:"info",icon:"fa-info-circle",color:"#2563eb",bgColor:"#ffffff",borderColor:"#3b82f6",textColor:"#1e40af"}},PAGE_NAMES:{profile:"基本设置",articles:"我的文章",mumbles:"我的碎碎念",timeline:"我的时间轴",photos:"我的相册"},SELECTORS:{navItem:".nav-item",navItemLink:".nav-item a",contentPage:".content-page",currentPageTitle:"#currentPageTitle",menuToggle:"#menuToggle",sidebarOverlay:"#sidebarOverlay",memberSidebar:".member-sidebar",tableContainer:".table-container",photosGrid:".photos-grid",mobileCards:".mobile-cards",mobilePhotosGrid:".mobile-photos-grid",publishModal:"#publishModal",deleteModal:"#deleteModal",twoFactorModal:"#twoFactorModal",modalBody:"#modalBody",modalTitle:"#modalTitle",confirmPublish:"#confirmPublish",loadingOverlay:"#loadingOverlay",toastContainer:"#toast-container"}};class MemberCenter{constructor(){this.state={currentPage:CONSTANTS.PAGES.PROFILE,currentTheme:window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light",currentPageNum:CONSTANTS.PAGINATION.DEFAULT_PAGE_NUM,pageSize:CONSTANTS.PAGINATION.DEFAULT_PAGE_SIZE,recording:!1,currentDeleteItem:null},this.media={mediaRecorder:null,audioChunks:[],audioUrl:null,audioBlob:null,stream:null,audioElement:null},this.recordingState={isRecording:!1,isPaused:!1,isPlaying:!1,duration:0,currentTime:0,startTime:null,recordingTimer:null,playbackTimer:null,hasRecording:!1},this.dataCache={lastLoadedData:{},userInfo:null},this.initialize(),this.cherryInstance=null,this.converter=new showdown.Converter({openLinksInNewWindow:!0,simplifiedAutoLink:!0,splitAdjacentBlockquotes:!0,strikethrough:!0,tables:!0,tasklists:!0})}initialize(){try{this.bindEvents(),this.loadUserInfo().then(),this.initTheme(),this.initPageFromHash().then(),this.initLayoutVisibility(),document.querySelectorAll("pre code").forEach(e=>{Prism.highlightElement(e)})}catch(e){console.error("初始化失败:",e),this.showMessage("系统初始化失败，请刷新页面重试","error")}}initLayoutVisibility(){this.isMobile()?($(CONSTANTS.SELECTORS.tableContainer+", "+CONSTANTS.SELECTORS.photosGrid).hide(),$(CONSTANTS.SELECTORS.mobileCards+", "+CONSTANTS.SELECTORS.mobilePhotosGrid).show()):($(CONSTANTS.SELECTORS.tableContainer+", "+CONSTANTS.SELECTORS.photosGrid).show(),$(CONSTANTS.SELECTORS.mobileCards+", "+CONSTANTS.SELECTORS.mobilePhotosGrid).hide())}bindEvents(){this.bindNavigationEvents(),this.bindMobileMenuEvents(),this.bindWindowEvents(),this.bindProfileEvents(),this.bindContentEvents(),this.bindModalEvents(),this.bindKeyboardEvents()}bindNavigationEvents(){$(CONSTANTS.SELECTORS.navItemLink).on("click",async e=>{e.preventDefault();e=$(e.currentTarget).parent().data("page");await this.switchPage(e),this.closeMobileMenu()}),$(window).on("hashchange",async()=>{await this.handleHashChange()})}bindMobileMenuEvents(){$(CONSTANTS.SELECTORS.menuToggle).on("click",()=>this.toggleMobileMenu()),$(CONSTANTS.SELECTORS.sidebarOverlay).on("click",()=>this.closeMobileMenu())}bindWindowEvents(){$(window).on("resize",()=>this.handleResize())}bindProfileEvents(){let e=$("#avatarFile");$("#saveProfile").on("click",()=>this.saveProfile()),$("#logout").on("click",()=>this.logout()),$("#uploadAvatar").on("click",()=>e.click()),e.on("change",async e=>this.handleAvatarUpload(e)),$("#bindTwoFactor").on("click",async()=>this.showTwoFactorModal()),$("#closeTwoFactorModal").on("click",()=>this.hideTwoFactorModal()),$("#confirmTwoFactor").on("click",async()=>this.confirmTwoFactor()),$("#copySecretKey").on("click",()=>this.copySecretKey()),$("#cancelTwoFactor").on("click",()=>this.hideTwoFactorModal())}bindContentEvents(){$("#newArticle").on("click",async()=>this.showArticleModal()),$("#searchArticles").on("click",async()=>this.searchArticles()),$("#newMumble").on("click",async()=>this.showMumbleModal()),$("#searchMumbles").on("click",async()=>this.searchMumbles()),$("#newTimeline").on("click",async()=>this.showTimelineModal()),$("#searchTimeline").on("click",async()=>this.searchTimeline()),$("#uploadPhoto").on("click",async()=>this.showPhotoModal()),$("#searchPhotos").on("click",async()=>this.searchPhotos())}bindModalEvents(){$("#closeModal").on("click",()=>this.hideModal()),$("#cancelPublish").on("click",()=>this.hideModal()),$(CONSTANTS.SELECTORS.confirmPublish).on("click",async()=>this.confirmPublish()),$("#closeDeleteModal").on("click",()=>this.hideDeleteModal()),$("#cancelDelete").on("click",()=>this.hideDeleteModal()),$("#confirmDelete").on("click",async()=>this.confirmDelete()),$(".modal-overlay").on("click",e=>{e.target===e.currentTarget&&(this.hideModal(),this.hideDeleteModal(),this.hideTwoFactorModal())})}bindKeyboardEvents(){$(document).on("keydown",e=>{"Escape"===e.key&&(this.hideModal(),this.hideDeleteModal(),this.hideTwoFactorModal())})}async handleHashChange(){try{var[e,t]=window.location.hash.substring(1).split("?"),a=this.parseQueryString(t),i=parseInt(a.pageIndex)||1,s=parseInt(a.pageSize)||CONSTANTS.PAGINATION.DEFAULT_PAGE_SIZE,o=e!==this.state.currentPage,r=i!==this.state.currentPageNum,n=s!==this.state.pageSize;(o||r||n)&&(this.state.currentPageNum=i,this.state.pageSize=s,o?await this.initPageFromHash():await this.loadPageData())}catch(e){console.error("处理Hash变化失败:",e)}}async switchPage(e,t=!0){if(this.isValidPage(e))try{var a=e!==this.state.currentPage;$(CONSTANTS.SELECTORS.navItem).removeClass("active"),$(`.nav-item[data-page="${e}"]`).addClass("active"),$(CONSTANTS.SELECTORS.contentPage).removeClass("active"),$(`#${e}-page`).addClass("active"),a&&t&&(this.state.currentPageNum=CONSTANTS.PAGINATION.DEFAULT_PAGE_NUM),this.state.currentPage=e,this.updateBreadcrumb(e),await this.loadPageData(),this.updateURL(e,this.state.currentPageNum,this.state.pageSize)}catch(e){console.error("页面切换失败:",e),this.showMessage("页面切换失败","error")}else console.warn("无效的页面标识:",e)}isValidPage(e){return Object.values(CONSTANTS.PAGES).includes(e)}updateBreadcrumb(e){e=CONSTANTS.PAGE_NAMES[e]||CONSTANTS.PAGE_NAMES.profile;$(CONSTANTS.SELECTORS.currentPageTitle).text(e)}async initPageFromHash(){try{var e=window.location.hash.substring(1),t=Object.values(CONSTANTS.PAGES),[a,i]=e.split("?"),s=this.parseQueryString(i);a&&t.includes(a)?(s.pageIndex?this.state.currentPageNum=parseInt(s.pageIndex)||CONSTANTS.PAGINATION.DEFAULT_PAGE_NUM:this.state.currentPageNum=CONSTANTS.PAGINATION.DEFAULT_PAGE_NUM,s.pageSize&&(this.state.pageSize=parseInt(s.pageSize)||CONSTANTS.PAGINATION.DEFAULT_PAGE_SIZE),await this.switchPage(a,!1)):await this.switchPage(CONSTANTS.PAGES.PROFILE)}catch(e){console.error("从Hash初始化页面失败:",e),await this.switchPage(CONSTANTS.PAGES.PROFILE)}}parseQueryString(e){var t,a={};if(e)try{for(t of e.split("&")){var[i,s]=t.split("=");i&&s&&(a[decodeURIComponent(i)]=decodeURIComponent(s))}}catch(e){console.warn("解析查询字符串失败:",e)}return a}buildQueryString(e){var t,a,i=[];for([t,a]of Object.entries(e))null!=a&&""!==a&&i.push(encodeURIComponent(t)+"="+encodeURIComponent(a));return 0<i.length?"?"+i.join("&"):""}updateURL(e,t=null,a=null){var i={},t=(null!==t&&t!==CONSTANTS.PAGINATION.DEFAULT_PAGE_NUM&&(i.pageIndex=t),null!==a&&a!==CONSTANTS.PAGINATION.DEFAULT_PAGE_SIZE&&(i.pageSize=a),this.buildQueryString(i)),a=""+e+t;window.location.hash.substring(1)!==a&&history.replaceState(null,null,"#"+a)}async loadUserInfo(){try{var e,t=await(await fetch("/my/info")).json();t.success?(e=t.data,this.dataCache.userInfo=e,this.updateUserInterface(e),this.updateTwoFactorStatus(e.twoFactorEnabled)):this.showMessage(t.msg,"error")}catch(e){console.error("加载用户信息失败:",e),this.showMessage("加载用户信息失败","error")}}updateUserInterface(e){var t={"#account":e.account,"#nickname":e.nickname,"#gender":e.gender,"#signature":e.signature,"#userName":e.nickname,"#userEmail":e.signature};Object.entries(t).forEach(([e,t])=>{e=$(e);e.is("input, textarea, select")?e.val(t):e.text(t)}),e.avatar&&$("#userAvatar, #avatarPreview").attr("src",e.avatar)}updateTwoFactorStatus(e){var t={enabled:{statusText:"已绑定",buttonText:"解绑双因素验证",buttonClass:"btn-danger",buttonIcon:"fa-unlock"},disabled:{statusText:"未绑定",buttonText:"绑定双因素验证",buttonClass:"btn-success",buttonIcon:"fa-shield"}},e=e?t.enabled:t.disabled;$(".status-text").text(e.statusText),$("#bindTwoFactor").removeClass("btn-success btn-danger").addClass(e.buttonClass).html(`<i class="fa ${e.buttonIcon}"></i> `+e.buttonText)}saveProfile(){try{let e=this.collectProfileFormData();this.validateProfileData(e)&&(this.showLoading(),this.mockApiCall(()=>{this.hideLoading(),this.showMessage("保存成功","success"),$("#userName").text(e.nickname),this.dataCache.userInfo&&Object.assign(this.dataCache.userInfo,e)},CONSTANTS.DELAYS.API_MOCK))}catch(e){console.error("保存个人资料失败:",e),this.hideLoading(),this.showMessage("保存失败，请重试","error")}}collectProfileFormData(){return{nickname:$("#nickname").val().trim(),gender:$("#gender").val(),signature:$("#signature").val().trim()}}validateProfileData(e){return e.nickname?!(20<e.nickname.length&&(this.showMessage("昵称不能超过20个字符","warning"),1)):(this.showMessage("请输入昵称","warning"),!1)}mockApiCall(e,t=CONSTANTS.DELAYS.API_MOCK){setTimeout(e,t)}logout(){confirm("确定要退出登录吗？")&&(this.showLoading(),this.mockApiCall(()=>{window.location.href="/login"},CONSTANTS.DELAYS.API_MOCK))}async handleAvatarUpload(e){try{var t=e.target.files[0];t&&this.validateImageFile(t)&&(this.previewImage(t),await this.uploadImage(t))}catch(e){console.error("头像上传失败:",e),this.showMessage("头像上传失败","error")}}validateImageFile(e){return e.type.startsWith("image/")?!(5242880<e.size&&(this.showMessage("图片文件不能超过5MB","error"),1)):(this.showMessage("请选择图片文件","error"),!1)}previewImage(e){var t=new FileReader;t.onload=e=>{$("#avatarPreview, #userAvatar").attr("src",e.target.result)},t.readAsDataURL(e)}async uploadImage(e){this.showLoading();var t=new FormData;t.append("avatar",e);e=await(await fetch("/Account/UpdateAvatar",{method:"POST",body:t})).json();this.hideLoading(),e.success?this.showMessage("头像上传成功","success"):this.showMessage(e.msg,"error")}async showTwoFactorModal(){try{var e="已绑定"===$(".status-text").text(),t=this.getTwoFactorModalConfig(e);await this.setupTwoFactorModal(t,e),$(CONSTANTS.SELECTORS.twoFactorModal).show()}catch(e){console.error("显示双因素验证模态框失败:",e),this.showMessage("无法打开双因素验证设置","error")}}getTwoFactorModalConfig(e){return e?{title:"解绑双因素验证",pinLabel:"请输入6位PIN码确认解绑：",confirmText:"确认解绑",showQrSection:!1}:{title:"绑定双因素验证",pinLabel:"请输入6位PIN码：",confirmText:"确认绑定",showQrSection:!0}}async setupTwoFactorModal(e,t){$("#modalTitle").text(e.title),$(".pin-section label").text(e.pinLabel),$("#confirmTwoFactor").text(e.confirmText),e.showQrSection?($(".qr-section").show(),await this.generateTwoFactorData()):$(".qr-section").hide()}hideTwoFactorModal(){$(CONSTANTS.SELECTORS.twoFactorModal).hide(),$("#pinCode").val("")}async generateTwoFactorData(){try{var e=await(await fetch("/my/two-factor")).json();$("#secretKey").val(e.manualEntryKey),$("#qrCode").html(`
                <div style="padding: 20px; color: #666;">
                    <img src="${e.qrCodeSetupImageUrl}" alt="twoFactorQrCode"/>
                </div>
                `)}catch(e){console.error("生成双因素验证数据失败:",e),this.showMessage("生成验证数据失败","error")}}copySecretKey(){try{var e=$("#secretKey").val();navigator.clipboard&&navigator.clipboard.writeText?navigator.clipboard.writeText(e).then(()=>{this.showMessage("密钥已复制到剪贴板","success")}):this.fallbackCopyText(e)}catch(e){console.error("复制密钥失败:",e),this.showMessage("复制失败，请手动复制","error")}}fallbackCopyText(e){var t=document.createElement("textarea");t.value=e,document.body.appendChild(t),t.select();try{document.execCommand("copy"),this.showMessage("密钥已复制到剪贴板","success")}catch(e){this.showMessage("复制失败，请手动复制","error")}document.body.removeChild(t)}async confirmTwoFactor(){try{var e,t,a,i,s=$("#pinCode").val().trim();this.validatePinCode(s)&&(t=(e="已绑定"===$(".status-text").text())?"/my/unbind-two-factor":"/my/bind-two-factor",this.showLoading(),(a=new FormData).append("pinCode",s),i=await(await fetch(t,{method:"POST",body:a})).json(),this.hideLoading(),i.success?this.showMessage("双因素验证"+(e?"已解绑":"已绑定"),"success"):this.showMessage(i.msg,"error"))}catch(e){console.error("双因素验证操作失败:",e),this.hideLoading(),this.showMessage("操作失败，请重试","error")}}validatePinCode(e){return e?6!==e.length?(this.showMessage("PIN码必须是6位数字","warning"),!1):!!/^\d{6}$/.test(e)||(this.showMessage("PIN码只能包含数字","warning"),!1):(this.showMessage("请输入PIN码","warning"),!1)}async loadPageData(){switch(this.state.currentPage){case CONSTANTS.PAGES.ARTICLES:await this.loadArticles();break;case CONSTANTS.PAGES.MUMBLES:await this.loadMumbles();break;case CONSTANTS.PAGES.TIMELINE:await this.loadTimeline();break;case CONSTANTS.PAGES.PHOTOS:await this.loadPhotos()}document.querySelectorAll("pre code").forEach(e=>{Prism.highlightElement(e)})}async loadArticles(e=null){this.showLoading(),null!==e&&(this.state.currentPageNum=e),e=this.state.currentPageNum;var t=$("#articleTitleSearch").val(),a=$("#articleTagSearch").val();try{var i=await(await fetch(`/Article/MyArticle?pageIndex=${e}&pageSize=${this.state.pageSize}title=${encodeURIComponent(t)}&tag=`+encodeURIComponent(a))).json();if(!i.success)return void this.showMessage(i.msg,"error");this.renderArticlesData(i.data.list),this.renderPagination("articles",i.data.totalPages,e)}catch(e){console.error("加载文章列表失败:",e)}this.hideLoading()}renderArticlesData(e){this.isMobile()?(this.renderArticlesMobileCards(e),$(CONSTANTS.SELECTORS.tableContainer).hide(),$(CONSTANTS.SELECTORS.mobileCards).show()):(this.renderArticlesTable(e),$(CONSTANTS.SELECTORS.tableContainer).show(),$(CONSTANTS.SELECTORS.mobileCards).hide())}renderArticlesTable(e){let t=$("#articlesTableBody");t.empty(),e.forEach(e=>{e=`
                <tr>
                    <td class="cell-title">
                        <a href="/article/read/${e.id}.html" title="${e.title}" target="_blank">
                            ${e.title}
                        </a>
                    </td>
                    <td class="cell-long-text">${e.introduction}</td>
                    <td>${e.tags.map(e=>`<span class="photo-tag">${e}</span>`).join("")}</td>
                    <td class="cell-status">${e.viewCount}</td>
                    <td class="cell-status">${e.commentCount}</td>
                    <td>${this.formatDefaultDateTime(e.createTime)}</td>
                    <td class="cell-actions">
                        <div class="table-actions">
                            <button class="btn btn-sm btn-primary" onclick="memberCenter.editArticle('${e.id}')">
                                <i class="fa fa-edit"></i> 修改
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="memberCenter.deleteItem('article', '${e.id}')">
                                <i class="fa fa-trash"></i> 删除
                            </button>
                        </div>
                    </td>
                </tr>
            `;t.append(e)})}renderPagination(i,e,s){var o=$("#"+(i+"Pagination"));if(o.empty(),!(e<=1)){var r,n=e=>{var t={},e=(1!==e&&(t.pageIndex=e),this.state.pageSize!==CONSTANTS.PAGINATION.DEFAULT_PAGE_SIZE&&(t.pageSize=this.state.pageSize),this.buildQueryString(t));return"#"+i+e},l=(s<=1?o.append(`
                <li class="page-item disabled">
                    <span class="page-link" tabindex="-1">
                        <i class="fa fa-chevron-left"></i>
                    </span>
                </li>
            `):o.append(`
                <li class="page-item">
                    <a class="page-link" href="${n(s-1)}">
                        <i class="fa fa-chevron-left"></i>
                    </a>
                </li>
            `),CONSTANTS.PAGINATION.MAX_VISIBLE_PAGES);let t=1,a=e;l<e&&(s<=(r=Math.floor(l/2))+1?a=l:e-r<=s?t=e-l+1:(t=s-r,a=s+r));for(let e=t;e<=a;e++)e===s?o.append(`
                    <li class="page-item active">
                        <span class="page-link">${e}</span>
                    </li>
                `):o.append(`
                    <li class="page-item">
                        <a class="page-link" href="${n(e)}">${e}</a>
                    </li>
                `);e<=s?o.append(`
                <li class="page-item disabled">
                    <span class="page-link" tabindex="-1">
                        <i class="fa fa-chevron-right"></i>
                    </span>
                </li>
            `):o.append(`
                <li class="page-item">
                    <a class="page-link" href="${n(s+1)}">
                        <i class="fa fa-chevron-right"></i>
                    </a>
                </li>
            `)}}async goToPage(e,t){switch(this.state.currentPageNum=t,this.updateURL(e,t,this.state.pageSize),e){case CONSTANTS.PAGES.ARTICLES:await this.loadArticles(t);break;case CONSTANTS.PAGES.MUMBLES:await this.loadMumbles(t);break;case CONSTANTS.PAGES.TIMELINE:await this.loadTimeline(t);break;case CONSTANTS.PAGES.PHOTOS:await this.loadPhotos(t)}}async loadMumbles(e=null){this.showLoading(),null!==e&&(this.state.currentPageNum=e);var t=[{name:"pageIndex",value:e=this.state.currentPageNum},{name:"pageSize",value:this.state.pageSize},{name:"content",value:$("#mumbleContentSearch").val()}],t=this.buildFetchQueryString(t);try{var a,i=await(await fetch("/Talk/MyTalk"+t)).json();i.success?(a=i.data.list,this.dataCache.lastLoadedData.mumbles=a,this.renderMumblesData(a),this.renderPagination("mumbles",i.data.totalPages,e),this.hideLoading()):(this.showMessage(i.msg,"error"),this.hideLoading())}catch(e){this.showMessage("获取碎碎念失败："+e.message)}}renderMumblesData(e){this.isMobile()?(this.renderMumblesMobileCards(e),$("#mumbles-page .table-container").hide(),$("#mumbles-page .mobile-cards").show()):(this.renderMumblesTable(e),$("#mumbles-page .table-container").show(),$("#mumbles-page .mobile-cards").hide())}renderMumblesTable(e){let t=$("#mumblesTableBody");t.empty(),e.forEach(e=>{e=`
                <tr>
                    <td class="cell-long-text">
                        <pre><code class="lang-markdown">${e.markdown}</code></pre>
                    </td>
                    <td class="cell-status">${e.like}</td>
                    <td class="cell-status">${e.commentCount}</td>
                    <td>${this.formatDefaultDateTime(e.createTime)}</td>
                    <td class="cell-actions">
                        <div class="table-actions">
                            <button class="btn btn-sm btn-primary" onclick="memberCenter.editMumble('${e.id}')">
                                <i class="fa fa-edit"></i> 修改
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="memberCenter.deleteItem('mumble', '${e.id}')">
                                <i class="fa fa-trash"></i> 删除
                            </button>
                        </div>
                    </td>
                </tr>
            `;t.append(e)})}async loadTimeline(e=null){this.showLoading(),null!==e&&(this.state.currentPageNum=e);var t=[{name:"pageIndex",value:e=this.state.currentPageNum},{name:"pageSize",value:this.state.pageSize},{name:"content",value:$("#timelineSearch").val()}],t=this.buildFetchQueryString(t);try{var a=await(await fetch("/Timeline/MyTimeline"+t)).json();if(!a.success)return this.showMessage(a.msg,"error"),void this.hideLoading();var i=a.data.list;this.dataCache.lastLoadedData.timeline=i,this.renderTimelineData(i),this.renderPagination("timeline",a.data.totalPages,e)}catch(e){this.showMessage("获取时间轴数据失败："+e.message,"error")}this.hideLoading()}renderTimelineData(e){this.isMobile()?(this.renderTimelineMobileCards(e),$("#timeline-page .table-container").hide(),$("#timeline-page .mobile-cards").show()):(this.renderTimelineTable(e),$("#timeline-page .table-container").show(),$("#timeline-page .mobile-cards").hide())}renderTimelineTable(e){let t=$("#timelineTableBody");t.empty(),e.forEach(e=>{e=`
                <tr>
                    <td class="cell-title">${e.title}</td>
                    <td class="cell-long-text">${e.content}</td>
                    <td>${moment(e.date).format("YYYY/MM/DD")}</td>
                    <td>${e.more?`<a href="${e.more}" target="_blank">链接</a>`:"-"}</td>
                    <td>${this.formatDefaultDateTime(e.createTime)}</td>
                    <td class="cell-actions">
                        <div class="table-actions">
                            <button class="btn btn-sm btn-primary" onclick="memberCenter.editTimeline('${e.id}')">
                                <i class="fa fa-edit"></i> 修改
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="memberCenter.deleteItem('timeline', '${e.id}')">
                                <i class="fa fa-trash"></i> 删除
                            </button>
                        </div>
                    </td>
                </tr>
            `;t.append(e)})}async loadPhotos(e=null){this.showLoading(),null!==e&&(this.state.currentPageNum=e),e=this.state.currentPageNum;var t=$("#photoTagSearch").val(),a=$("#photoDescSearch").val(),t="/my/photos"+this.buildFetchQueryString([{name:"pageIndex",value:e},{name:"pageSize",value:12},{name:"tag",value:t},{name:"description",value:a}]);try{var i=await(await fetch(t)).json();if(!i.success)return this.hideLoading(),void this.showMessage(i.msg,"error");this.dataCache.lastLoadedData.photos=i.data.list,this.renderPhotosData(i.data.list),this.renderPagination("photos",i.data.totalPages,e)}catch(e){this.showMessage(e.message,"error")}this.hideLoading()}buildFetchQueryString(e){var t,a=[];for(t of e)a.push(t.name+"="+encodeURIComponent(t.value));return 0===a.length?"":"?"+a.join("&")}renderPhotosData(e){this.isMobile()?(this.renderPhotosMobileGrid(e),$("#photos-page .photos-grid").hide(),$("#photos-page .mobile-photos-grid").show()):(this.renderPhotosGrid(e),$("#photos-page .photos-grid").show(),$("#photos-page .mobile-photos-grid").hide())}renderPhotosGrid(e){let t=$("#photosGrid");t.empty(),e.forEach(e=>{e=`
                <div class="photo-card">
                    <img src="${e.accessUrl}!albums" alt="${e.description}" class="photo-image">
                    <div class="photo-info">
                        <div class="photo-title">${e.description??""}</div>
                        <div class="photo-meta">${new Date(e.uploadTime).toLocaleString()}</div>
                        <div class="photo-tags">
                            ${e.tags.map(e=>`<span class="photo-tag">${e}</span>`).join("")}
                        </div>
                        <div class="photo-actions">
                            <button class="btn btn-sm btn-primary" onclick="memberCenter.editPhoto('${e.id}')">
                                <i class="fa fa-edit"></i> 修改
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="memberCenter.deleteItem('photo', '${e.id}')">
                                <i class="fa fa-trash"></i> 删除
                            </button>
                        </div>
                    </div>
                </div>
            `;t.append(e)})}async showArticleModal(t=null){var e=null!==t;$("#modalTitle").text(e?"编辑文章":"发布文章"),$("#confirmPublish").text(e?"保存修改":"发布文章");let a=[];try{var i=await(await fetch("/Article/Tags")).json();i.success||this.showMessage(i.msg,"error"),a=i.data??[]}catch(e){this.showMessage("获取标签列表失败:"+e,"error")}e=a.map(e=>`<option value="${e}" ${!0===t?.tags.includes(e)?"selected":""}>${e}</option>`).join(""),i=`
            ${this.generateRecordingSection()}
            <input type="hidden" value="${t?.id??""}" id="articleId"/>
            <input type="hidden" value="/Article/Upload" id="articleUploadAddress"/>
            <div class="form-group">
                <label>标题 <span class="required">*</span></label>
                <input type="text" class="form-control" id="articleTitle" placeholder="请输入文章标题" value="${t?.title??""}">
            </div>
            <div class="form-group">
                <label>选择标签</label>
                <select class="form-control" id="articleTags" multiple>
                    ${e}
                </select>
            </div>
            <div class="form-group">
                <label>补充标签</label>
                <input type="text" class="form-control" id="articleExtraTags" placeholder="请输入补充标签，用逗号分隔">
            </div>
            <div class="form-group">
                <label>文章简介 <span class="required">*</span></label>
                <textarea class="form-control" id="articleIntroduction" rows="3" placeholder="请输入文章简介">${t?.introduction??""}</textarea>
            </div>
            <div class="form-group">
                <label>文章内容 <span class="required">*</span></label>
                <div class="form-control" style="height: 500px" id="articleContent"></div>
            </div>
        `;$("#modalBody").html(i),$("#publishModal").show(),this.bindRecordingEvents(),this.initMarkdownEditor(t?.markdown??"","articleContent","articleUploadAddress")}initMarkdownEditor(e,t,a){let i=this;this.cherryInstance=new Cherry({id:t,value:e,height:"100%",defaultModel:"editOnly",themeSettings:{mainTheme:this.state.currentTheme,codeBlockTheme:"one-dark"},engine:{syntax:{codeBlock:{editCode:!1,changeLang:!1}}},toolbars:{toolbar:["bold","italic","size","|","color","header","togglePreview","|","theme",{insert:["image","link","hr","br","code","table"]}]},fileUpload:async function(e,t){await i.fileUpload(e,t,a)}}),this.cherryInstance.switchModel("editOnly")}async fileUpload(e,t,a){var i=new FormData,e=(i.append("image",e),document.getElementById(a).value);t((await(await fetch(e,{method:"post",body:i})).json()).url)}async showMumbleModal(t=null){var a=null!==t;$("#modalTitle").text(a?"编辑碎碎念":"发布碎碎念"),$("#confirmPublish").text(a?"保存修改":"发布碎碎念");try{let e=null;if(a){var i=await(await fetch("/Talk/Detail/"+t)).json();if(!i.success)return void this.showMessage(i.msg,"error");e=i.data}var s=`
                ${this.generateRecordingSection()}
                <input type="hidden" id="mumbleId" value="${t??""}" />
                <input type="hidden" value="/Talk/Upload" id="mumbleUploadAddress"/>
                <div class="form-group">
                    <label>内容 <span class="required">*</span></label>
                    <div class="form-control" style="height:500px" id="mumbleContent"></div>
                </div>
            `;$("#modalBody").html(s),$("#publishModal").show(),this.initMarkdownEditor(e?.markdown??"","mumbleContent","mumbleUploadAddress"),this.bindRecordingEvents()}catch(e){this.showMessage(e.message,"error")}}async showTimelineModal(e=null){var t=null!==e;$("#modalTitle").text(t?"编辑时间轴":"发布时间轴"),$("#confirmPublish").text(t?"保存修改":"发布时间轴");let a=null;try{if(t){var i=await(await fetch("/Timeline/Detail/"+e)).json();if(!i.success)return void this.showMessage(i.msg,"error");a=i.data}}catch(e){this.showMessage(e.message,"error")}t=`
            ${this.generateRecordingSection()}
            <input type="hidden" id="timelineId" value="${a?.id??""}" />
            <input type="hidden" value="/Timeline/Upload" id="timelineUploadAddress"/>
            <div class="form-group">
                <label>标题 <span class="required">*</span></label>
                <input type="text" class="form-control" id="timelineTitle" placeholder="请输入时间轴标题" value="${a?.title??""}">
            </div>
            <div class="form-group">
                <label>更多链接</label>
                <input type="url" class="form-control" id="timelineMore" placeholder="请输入链接地址" value="${a?.more??""}">
            </div>
            <div class="form-group">
                <label>时间轴日期 <span class="required">*</span></label>
                <input type="date" class="form-control" id="timelineDate" value="${this.formatDefaultDate(a?.date)}">
            </div>
            <div class="form-group">
                <label>内容 <span class="required">*</span></label>
                <div class="form-control" style="height: 500px" id="timelineContent"></div>
            </div>
        `;$("#modalBody").html(t),$("#publishModal").show(),this.initMarkdownEditor(a?.content??"","timelineContent","timelineUploadAddress"),this.bindRecordingEvents()}async showPhotoModal(e=null){let t=null,a=[];try{if(null!==e){var i=await(await fetch("my/photos/get/"+e)).json();if(!i.success)return void this.showMessage(i.msg,"error");t=i.data}}catch(e){this.showMessage(e.message,"error")}try{var s=await(await fetch("/my/photos/tags")).json();s.success||this.showMessage(s.msg,"error"),a=s.data??[]}catch(e){this.showMessage("获取标签列表失败:"+e,"error")}e=a.map(e=>`
                <option value="${e}" ${!0===t?.tags.includes(e)?"selected":""}>
                    ${e}
                </option>
                `).join(""),i=null!==t,$("#modalTitle").text(i?"编辑照片":"上传照片"),$("#confirmPublish").text(i?"保存修改":"上传照片"),s=`
            ${i?"":`
            <div class="form-group">
                <label>选择照片 <span class="required">*</span></label>
                <input type="file" class="form-control" id="photoFile" accept="image/*">
            </div>
            `}
            <input type="hidden" id="photoId" value="${t?.id??""}" />
            <div class="form-group">
                <label>照片预览</label>
                <div class="photo-preview">
                    <img src="${t?.accessUrl??""}" alt="照片预览" id="photoPreview" style="max-width: 100%; max-height: 300px; ${i?"":"display: none;"}">
                </div>
            </div>
            <div class="form-group">
                <label>选择标签</label>
                <select class="form-control" id="photoTags" multiple>
                    ${e}
                </select>
            </div>
            <div class="form-group">
                <label>补充标签</label>
                <input type="text" class="form-control" id="photoExtraTags" placeholder="请输入补充标签，用逗号分隔">
            </div>
            <div class="form-group">
                <label>描述</label>
                <textarea class="form-control" id="photoDescription" rows="3" placeholder="请输入照片描述">${t?.description??""}</textarea>
            </div>
        `;$("#modalBody").html(s),$("#publishModal").show(),i||$("#photoFile").on("change",e=>this.handlePhotoPreview(e))}handlePhotoPreview(e){var t,e=e.target.files[0];e&&((t=new FileReader).onload=e=>{$("#photoPreview").attr("src",e.target.result).show()},t.readAsDataURL(e))}generateRecordingSection(){return`
            <div class="recording-section">
                <div class="recording-controls">
                    <button type="button" class="btn btn-danger" id="startRecording">
                        <i class="fa fa-microphone"></i> 开始录音
                    </button>
                    <button type="button" class="btn btn-secondary" id="stopRecording" style="display: none;">
                        <i class="fa fa-stop"></i> 停止录音
                    </button>
                    <button type="button" class="btn btn-info" id="playRecording" style="display: none;">
                        <i class="fa fa-play"></i> 播放
                    </button>
                    <button type="button" class="btn btn-warning" id="pauseRecording" style="display: none;">
                        <i class="fa fa-pause"></i> 暂停
                    </button>
                    <button type="button" class="btn btn-secondary" id="clearRecording" style="display: none;">
                        <i class="fa fa-trash"></i> 清除
                    </button>
                    <button type="button" class="btn btn-success" id="uploadRecording" style="display: none;">
                        <i class="fa fa-upload"></i> 上传
                    </button>
                </div>
                <div class="recording-status" id="recordingStatus" style="display: none;">
                    <div class="recording-indicator"></div>
                    <span id="recordingStatusText">准备录音...</span>
                    <span id="recordingTime">00:00</span>
                </div>
                <div class="recording-player" id="recordingPlayer" style="display: none;">
                    <div class="audio-progress-container">
                        <div class="audio-progress" id="audioProgress">
                            <div class="audio-progress-bar" id="audioProgressBar"></div>
                            <div class="audio-progress-handle" id="audioProgressHandle"></div>
                        </div>
                    </div>
                    <div class="audio-time-info">
                        <span id="currentTime">00:00</span>
                        <span class="time-separator">/</span>
                        <span id="totalTime">00:00</span>
                    </div>
                </div>
            </div>
        `}bindRecordingEvents(){this.resetRecordingState(),$("#startRecording").on("click",()=>this.startRecording()),$("#stopRecording").on("click",()=>this.stopRecording()),$("#playRecording").on("click",()=>this.togglePlayback()),$("#pauseRecording").on("click",()=>this.pausePlayback()),$("#clearRecording").on("click",()=>this.clearRecording()),$("#uploadRecording").on("click",async()=>this.uploadRecording()),this.bindProgressBarEvents()}resetRecordingState(){this.stopRecording(),this.stopPlayback(),this.recordingState={isRecording:!1,isPaused:!1,isPlaying:!1,duration:0,currentTime:0,startTime:null,recordingTimer:null,playbackTimer:null,hasRecording:!1},this.cleanupMediaResources(),this.updateRecordingUI()}cleanupMediaResources(){this.media.stream&&(this.media.stream.getTracks().forEach(e=>e.stop()),this.media.stream=null),this.media.audioUrl&&(URL.revokeObjectURL(this.media.audioUrl),this.media.audioUrl=null),this.media.mediaRecorder=null,this.media.audioChunks=[],this.media.audioBlob=null,this.media.audioElement=null}async startRecording(){try{var e,t;navigator.mediaDevices&&navigator.mediaDevices.getUserMedia?(this.cleanupMediaResources(),e=await navigator.mediaDevices.getUserMedia({audio:{echoCancellation:!0,noiseSuppression:!0,autoGainControl:!0}}),t=(this.media.stream=e,MediaRecorder.isTypeSupported(CONSTANTS.RECORDING.AUDIO_TYPE)?CONSTANTS.RECORDING.AUDIO_TYPE:CONSTANTS.RECORDING.FALLBACK_TYPE),this.media.mediaRecorder=new MediaRecorder(e,{mimeType:t}),this.media.audioChunks=[],this.setupMediaRecorderEvents(),this.media.mediaRecorder.start(),this.recordingState.isRecording=!0,this.recordingState.startTime=Date.now(),this.startRecordingTimer(),this.updateRecordingUI(),this.showMessage("开始录音","success")):this.showMessage("浏览器不支持录音功能","error")}catch(e){console.error("开始录音失败:",e),this.handleRecordingError(e)}}setupMediaRecorderEvents(){this.media.mediaRecorder.ondataavailable=e=>{0<e.data.size&&this.media.audioChunks.push(e.data)},this.media.mediaRecorder.onstop=()=>{this.processRecordedAudio()},this.media.mediaRecorder.onerror=e=>{console.error("录音错误:",e.error),this.showMessage("录音过程中出现错误","error")}}processRecordedAudio(){try{let e=this.recordingState.startTime?(Date.now()-this.recordingState.startTime)/1e3:0;var t;e<CONSTANTS.RECORDING.MIN_DURATION?(this.showMessage(`录音时长太短，至少需要${CONSTANTS.RECORDING.MIN_DURATION}秒`,"warning"),this.clearRecording()):(t=this.media.mediaRecorder.mimeType,this.media.audioBlob=new Blob(this.media.audioChunks,{type:t}),this.media.audioUrl=URL.createObjectURL(this.media.audioBlob),this.media.audioElement=new Audio(this.media.audioUrl),this.media.audioElement.onloadedmetadata=()=>{this.recordingState.duration=this.media.audioElement.duration||e,this.recordingState.hasRecording=!0,this.updateRecordingUI()},this.media.audioElement.onerror=()=>{console.warn("音频文件加载失败，使用计算的时长"),this.recordingState.duration=e,this.recordingState.hasRecording=!0,this.updateRecordingUI()},this.showMessage("录音完成","success"))}catch(e){console.error("处理录音失败:",e),this.showMessage("处理录音失败","error")}}stopRecording(){try{this.media.mediaRecorder&&this.recordingState.isRecording&&(this.media.mediaRecorder.stop(),this.recordingState.isRecording=!1,this.stopRecordingTimer(),this.media.stream&&this.media.stream.getTracks().forEach(e=>e.stop()),this.updateRecordingUI())}catch(e){console.error("停止录音失败:",e),this.showMessage("停止录音失败","error")}}startRecordingTimer(){this.recordingState.recordingTimer=setInterval(()=>{var e;this.recordingState.isRecording&&((e=(Date.now()-this.recordingState.startTime)/1e3)>=CONSTANTS.RECORDING.MAX_DURATION?(this.stopRecording(),this.showMessage(`已达到最大录音时长${CONSTANTS.RECORDING.MAX_DURATION}秒`,"warning")):this.updateRecordingTime(e))},CONSTANTS.RECORDING.UPDATE_INTERVAL)}stopRecordingTimer(){this.recordingState.recordingTimer&&(clearInterval(this.recordingState.recordingTimer),this.recordingState.recordingTimer=null)}togglePlayback(){this.recordingState.hasRecording&&this.media.audioElement?this.recordingState.isPlaying?this.pausePlayback():this.startPlayback():this.showMessage("没有可播放的录音","warning")}startPlayback(){try{this.media.audioElement.currentTime=this.recordingState.currentTime,this.media.audioElement.play(),this.recordingState.isPlaying=!0,this.recordingState.isPaused=!1,this.startPlaybackTimer(),this.updateRecordingUI()}catch(e){console.error("播放失败:",e),this.showMessage("播放失败","error")}}pausePlayback(){try{this.media.audioElement&&(this.media.audioElement.pause(),this.recordingState.isPlaying=!1,this.recordingState.isPaused=!0,this.recordingState.currentTime=this.media.audioElement.currentTime,this.stopPlaybackTimer(),this.updateRecordingUI())}catch(e){console.error("暂停失败:",e)}}stopPlayback(){try{this.media.audioElement&&(this.media.audioElement.pause(),this.media.audioElement.currentTime=0),this.recordingState.isPlaying=!1,this.recordingState.isPaused=!1,this.recordingState.currentTime=0,this.stopPlaybackTimer(),this.updateRecordingUI()}catch(e){console.error("停止播放失败:",e)}}startPlaybackTimer(){this.recordingState.playbackTimer=setInterval(()=>{this.recordingState.isPlaying&&this.media.audioElement&&(this.recordingState.currentTime=this.media.audioElement.currentTime,this.updatePlaybackProgress(),this.recordingState.currentTime>=this.recordingState.duration)&&this.stopPlayback()},CONSTANTS.RECORDING.UPDATE_INTERVAL)}stopPlaybackTimer(){this.recordingState.playbackTimer&&(clearInterval(this.recordingState.playbackTimer),this.recordingState.playbackTimer=null)}clearRecording(){try{this.stopPlayback(),this.cleanupMediaResources(),this.recordingState.hasRecording=!1,this.recordingState.duration=0,this.recordingState.currentTime=0,this.updateRecordingUI(),this.showMessage("录音已清除","info")}catch(e){console.error("清除录音失败:",e),this.showMessage("清除录音失败","error")}}async uploadRecording(){try{var e,t;this.recordingState.hasRecording&&this.media.audioBlob?(this.showLoading("正在上传录音..."),(e=new FormData).append("record",this.media.audioBlob,"recording.webm"),e.append("duration",this.recordingState.duration),(t=await(await fetch("/Audio/Upload",{method:"POST",body:e})).json()).success?(this.cherryInstance?.insert||this.cherryInstance.insert(`<audio controls src="${t.data.accessUrl}"></audio>`,!0),this.hideLoading(),this.showMessage("录音上传成功","success")):(this.showMessage(t.msg,"error"),this.hideLoading())):this.showMessage("没有可上传的录音","warning")}catch(e){console.error("上传录音失败:",e),this.hideLoading(),this.showMessage("上传录音失败","error")}}handleRecordingError(e){let t="录音失败";"NotAllowedError"===e.name?t="请允许访问麦克风":"NotFoundError"===e.name?t="未找到麦克风设备":"NotSupportedError"===e.name&&(t="浏览器不支持录音功能"),this.showMessage(t,"error"),this.resetRecordingState()}updateRecordingUI(){var{isRecording:e,hasRecording:t,isPlaying:a,isPaused:i}=this.recordingState;$("#startRecording").toggle(!e&&!t),$("#stopRecording").toggle(e),$("#playRecording").toggle(t&&!e),$("#pauseRecording").toggle(a),$("#clearRecording").toggle(t&&!e),$("#uploadRecording").toggle(t&&!e),$("#recordingStatus").toggle(e),$("#recordingPlayer").toggle(t&&!e),t&&(e=$("#playRecording"),a?e.html('<i class="fa fa-pause"></i> 暂停'):i?e.html('<i class="fa fa-play"></i> 继续'):e.html('<i class="fa fa-play"></i> 播放')),this.updateTimeDisplay()}updateRecordingTime(e){e=this.formatTime(e);$("#recordingTime").text(e),$("#recordingStatusText").text("录音中... "+e)}updateTimeDisplay(){var e=this.formatTime(this.recordingState.currentTime),t=this.formatTime(this.recordingState.duration);$("#currentTime").text(e),$("#totalTime").text(t)}updatePlaybackProgress(){var{currentTime:e,duration:t}=this.recordingState;0<t&&(e=e/t*100,$("#audioProgressBar").css("width",e+"%"),$("#audioProgressHandle").css("left",e+"%")),this.updateTimeDisplay()}formatTime(e){var t;return isNaN(e)||e<0?"00:00":(t=Math.floor(e/60),e=Math.floor(e%60),t.toString().padStart(2,"0")+":"+e.toString().padStart(2,"0"))}bindProgressBarEvents(){let r=$("#audioProgress"),n=$("#audioProgressHandle"),l=!1;r.on("click",e=>{var t;this.recordingState.hasRecording&&(t=r[0].getBoundingClientRect(),e=(e.clientX-t.left)/t.width*this.recordingState.duration,this.seekTo(e))}),n.on("mousedown",o=>{if(this.recordingState.hasRecording){l=!0,o.preventDefault();let t=o.clientX,a=r[0].getBoundingClientRect();let i=(n[0].getBoundingClientRect().left-a.left)/a.width,e=e=>{l&&(e=(e.clientX-t)/a.width,e=Math.max(0,Math.min(1,i+e))*this.recordingState.duration,this.recordingState.currentTime=e,this.updatePlaybackProgress())},s=()=>{l&&(l=!1,this.seekTo(this.recordingState.currentTime)),$(document).off("mousemove",e),$(document).off("mouseup",s)};$(document).on("mousemove",e),$(document).on("mouseup",s)}}),n.on("touchstart",i=>{if(this.recordingState.hasRecording){i.originalEvent.touches[0];let t=r[0].getBoundingClientRect(),e=e=>{e=e.originalEvent.touches[0],e=Math.max(0,Math.min(1,(e.clientX-t.left)/t.width))*this.recordingState.duration;this.recordingState.currentTime=e,this.updatePlaybackProgress()},a=()=>{this.seekTo(this.recordingState.currentTime),$(document).off("touchmove",e),$(document).off("touchend",a)};$(document).on("touchmove",e),$(document).on("touchend",a)}})}seekTo(e){this.recordingState.hasRecording&&this.media.audioElement&&(this.recordingState.currentTime=Math.max(0,Math.min(e,this.recordingState.duration)),this.media.audioElement&&(this.media.audioElement.currentTime=this.recordingState.currentTime),this.updatePlaybackProgress())}async editArticle(e){this.showLoading();try{var t=await(await fetch("/Article/Detail/"+e)).json();if(!t.success)return void this.showMessage(t.msg,"error");await this.showArticleModal(t.data)}catch(e){this.showMessage(e.message,"error")}this.hideLoading()}async editMumble(e){await this.showMumbleModal(e)}async editTimeline(e){await this.showTimelineModal(e)}async editPhoto(e){await this.showPhotoModal(e)}deleteItem(e,t){this.state.currentDeleteItem={type:e,id:t},$("#deleteModal").show()}async confirmDelete(){if(this.state.currentDeleteItem){this.showLoading();let e=null;var{type:t,id:a}=this.state.currentDeleteItem;switch(t){case"article":e="/Article/Delete";break;case"mumble":e="/Talk/Delete";break;case"timeline":e="/Timeline/Delete";break;case"photo":e="/my/photos/delete";break;default:return this.hideLoading(),this.hideDeleteModal(),void this.showMessage("未匹配到的类型："+t,"error")}await this.deleteHandle(e,a)}}async deleteHandle(e,t){try{var a=new FormData;a.append("id",t);var i=await(await fetch(e,{method:"POST",body:a})).json();i.success?(this.hideLoading(),this.hideDeleteModal(),this.showMessage("删除成功","success"),await this.loadPageData()):(this.hideLoading(),this.hideDeleteModal(),this.showMessage(i.msg,"error"))}catch(e){this.hideLoading(),this.hideDeleteModal(),this.showMessage(e.message,"error")}}async searchArticles(){await this.loadArticles(CONSTANTS.PAGINATION.DEFAULT_PAGE_NUM)}async searchMumbles(){await this.loadMumbles(CONSTANTS.PAGINATION.DEFAULT_PAGE_NUM)}async searchTimeline(){await this.loadTimeline(CONSTANTS.PAGINATION.DEFAULT_PAGE_NUM)}async searchPhotos(){await this.loadPhotos(CONSTANTS.PAGINATION.DEFAULT_PAGE_NUM)}async confirmPublish(){var e=$("#modalTitle").text();e.includes("文章")?await this.publishArticle():e.includes("碎碎念")?await this.publishMumble():e.includes("时间轴")?await this.publishTimeline():e.includes("照片")&&await this.publishPhoto()}async publishArticle(){var e=$("#articleId").val(),t=$("#articleTitle").val(),a=$("#articleIntroduction").val(),i=$("#articleExtraTags").val(),s=$("#articleTags").val();if(null===this.cherryInstance)this.showMessage("未获取到编辑器实例","warning");else if(s&&0!==s.length&&!s.some(e=>null===e||""===e.trim())||null!==i&&""!==i.trim()){var o=this.cherryInstance.getMarkdown(),r=this.cherryInstance.getHtml();if(t&&a&&null!==o&&""!==o.trim()){this.showLoading();try{var n=new FormData;n.append("id",e),n.append("title",t),n.append("tags",s),n.append("introduction",a),n.append("markdown",o),n.append("content",r),n.append("newTag",i);var l=await(await fetch("/Article/Publish",{method:"POST",body:n})).json();l.success?(this.hideLoading(),this.hideModal(),this.showMessage("文章发布成功","success"),await this.loadArticles()):(this.showMessage(l.msg,"error"),this.hideLoading())}catch(e){this.showMessage("文章保存失败："+e)}}else this.showMessage("请填写必填字段","warning")}else this.showMessage("请选择标签","error")}async publishMumble(){let e=null,t=null;var a=$("#mumbleId").val();if(this.cherryInstance?.getMarkdown&&this.cherryInstance.getHtml&&(e=this.cherryInstance.getMarkdown(),t=this.cherryInstance.getHtml()),e){this.showLoading();try{var i=new FormData;i.append("markdown",e),i.append("html",t),i.append("id",a);var s=await(await fetch("/Talk/Publish",{method:"POST",body:i})).json();s.success?(this.hideModal(),this.showMessage("碎碎念发布成功","success"),this.hideLoading(),await this.loadMumbles()):(this.hideLoading(),this.showMessage(s.msg,"error"))}catch(e){this.hideLoading(),this.showMessage(e.message,"error")}}else this.showMessage("请输入内容","warning")}async publishTimeline(){var e=$("#timelineTitle").val(),t=$("#timelineDate").val(),a=$("#timelineId").val(),i=$("#timelineMore").val(),s=this.cherryInstance?.getMarkdown();if(e&&t&&s){this.showLoading();try{var o=new FormData;o.append("id",a),o.append("title",e),o.append("date",t),o.append("more",i),o.append("content",s);var r=await(await fetch("/Timeline/Publish",{method:"POST",body:o})).json();r.success?(this.hideLoading(),this.hideModal(),this.showMessage("时间轴发布成功","success"),await this.loadTimeline()):(this.showMessage(r.msg,"error"),this.hideLoading())}catch(e){this.showMessage(e.message,"error")}}else this.showMessage("请填写必填字段","warning")}async publishPhoto(){var e=$("#photoDescription").val(),t=$("#photoTags").val()??[],a=$("#photoId").val(),i=$("#photoFile")[0]?.files[0]??null,s=$("#photoExtraTags").val();if(null!==s&&""!==s.trim()&&t.push(s),0===t.length)this.showMessage("请选择标签","error");else if(a||i){var o,r=new FormData;r.append("photo",i),r.append("id",a),r.append("description",e);for(o of t)r.append("tags",o);this.showLoading();try{var n=await(await fetch("/my/photos/publish",{method:"POST",body:r})).json();n.success?(this.hideLoading(),this.hideModal(),this.showMessage("照片上传成功","success"),await this.loadPhotos()):(this.showMessage(n.msg,"error"),this.hideLoading())}catch(e){this.showMessage(e.message,"error")}}else this.showMessage("请选择照片","error")}hideModal(){this.cherryInstance=null,$(CONSTANTS.SELECTORS.publishModal).hide(),$(CONSTANTS.SELECTORS.modalBody).empty()}hideDeleteModal(){$(CONSTANTS.SELECTORS.deleteModal).hide(),this.state.currentDeleteItem=null}showLoading(e="加载中..."){var t=$(".loading-spinner p");0<t.length&&t.text(e),$(CONSTANTS.SELECTORS.loadingOverlay).show()}hideLoading(){$(CONSTANTS.SELECTORS.loadingOverlay).hide()}showMessage(e,t="info"){try{var a=CONSTANTS.MESSAGE_TYPES,i=a[t.toUpperCase()]||a.INFO,s=`message-${Date.now()}-`+Math.random().toString(36).substr(2,9),o=this.createToastElement(s,t,e,i);this.appendToastToContainer(o),this.animateToast(o,s)}catch(e){console.error("显示消息失败:",e)}}createToastElement(e,t,a,i){e=$(`
            <div class="toast-message" id="${e}" data-type="${t}">
                <div class="toast-content">
                    <div class="toast-icon">
                        <i class="fa ${i.icon}"></i>
                    </div>
                    <div class="toast-text">
                        <div class="toast-message-text">${a}</div>
                    </div>
                    <button type="button" class="toast-close">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
                <div class="toast-progress">
                    <div class="toast-progress-bar"></div>
                </div>
            </div>
        `);return e.css({"--toast-color":i.color,"--toast-bg-color":i.bgColor,"--toast-border-color":i.borderColor,"--toast-text-color":i.textColor}),e}appendToastToContainer(e){let t=$(CONSTANTS.SELECTORS.toastContainer);0===t.length&&(t=$('<div id="toast-container"></div>'),$("body").append(t)),t.append(e)}animateToast(e,t){setTimeout(()=>{e.addClass("toast-show")},10),setTimeout(()=>{e.find(".toast-progress-bar").addClass("toast-progress-active")},100),e.find(".toast-close").on("click",()=>{this.hideMessage(t)}),setTimeout(()=>{this.hideMessage(t)},CONSTANTS.DELAYS.TOAST_AUTO_HIDE)}hideMessage(e){try{let t=$("#"+e);0!==t.length&&(t.addClass("toast-hide"),setTimeout(()=>{t.remove();var e=$(CONSTANTS.SELECTORS.toastContainer);0===e.children().length&&e.remove()},CONSTANTS.DELAYS.TOAST_HIDE_ANIMATION))}catch(e){console.error("隐藏消息失败:",e)}}initTheme(){try{var e=localStorage.getItem("theme")||(window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light");this.setTheme(e)}catch(e){console.error("初始化主题失败:",e),this.setTheme("light")}}setTheme(e){try{["light","dark"].includes(e)||(e="light"),this.state.currentTheme=e,$("html").attr("data-theme",e),localStorage.setItem("theme",e)}catch(e){console.error("设置主题失败:",e)}}toggleTheme(){var e="light"===this.state.currentTheme?"dark":"light";this.setTheme(e)}toggleMobileMenu(){$(CONSTANTS.SELECTORS.memberSidebar).toggleClass("active"),$(CONSTANTS.SELECTORS.sidebarOverlay).toggleClass("active")}closeMobileMenu(){$(CONSTANTS.SELECTORS.memberSidebar).removeClass("active"),$(CONSTANTS.SELECTORS.sidebarOverlay).removeClass("active")}handleResize(){try{$(window).width()>CONSTANTS.BREAKPOINTS.TABLET&&this.closeMobileMenu(),this.rerenderCurrentPageData()}catch(e){console.error("处理窗口大小改变失败:",e)}}isMobile(){return $(window).width()<=CONSTANTS.BREAKPOINTS.MOBILE}isTablet(){var e=$(window).width();return e>CONSTANTS.BREAKPOINTS.MOBILE&&e<=CONSTANTS.BREAKPOINTS.TABLET}rerenderCurrentPageData(){try{var e;this.dataCache.lastLoadedData&&this.dataCache.lastLoadedData[this.state.currentPage]&&(e=this.dataCache.lastLoadedData[this.state.currentPage],this.renderPageData(this.state.currentPage,e))}catch(e){console.error("重新渲染页面数据失败:",e)}}renderPageData(e,t){try{switch(e){case CONSTANTS.PAGES.ARTICLES:this.renderArticlesData(t);break;case CONSTANTS.PAGES.MUMBLES:this.renderMumblesData(t);break;case CONSTANTS.PAGES.TIMELINE:this.renderTimelineData(t);break;case CONSTANTS.PAGES.PHOTOS:this.renderPhotosData(t);break;default:console.warn("未知的页面类型:",e)}}catch(e){console.error("渲染页面数据失败:",e)}}renderArticlesMobileCards(e){let t=$("#articlesMobileCards");t.empty(),e.forEach(e=>{e=`
                <div class="mobile-card">
                    <div class="mobile-card-row">
                        <div class="mobile-card-label">标题</div>
                        <div class="mobile-card-content">${e.title}</div>
                    </div>
                    <div class="mobile-card-row">
                        <div class="mobile-card-label">简介</div>
                        <div class="mobile-card-content">${e.introduction}</div>
                    </div>
                    <div class="mobile-card-row">
                        <div class="mobile-card-label">标签</div>
                        <div class="mobile-card-content">
                            ${e.tags.map(e=>`<span class="photo-tag">${e}</span>`).join("")}
                        </div>
                    </div>
                    <div class="mobile-card-row">
                        <div class="mobile-card-label">查看量</div>
                        <div class="mobile-card-content">${e.viewCount}</div>
                    </div>
                    <div class="mobile-card-row">
                        <div class="mobile-card-label">评论量</div>
                        <div class="mobile-card-content">${e.commentCount}</div>
                    </div>
                    <div class="mobile-card-row">
                        <div class="mobile-card-label">发布时间</div>
                        <div class="mobile-card-content">${this.formatDefaultDateTime(e.createTime)}</div>
                    </div>
                    <div class="mobile-card-row">
                        <div class="mobile-card-label">操作</div>
                        <div class="mobile-card-actions">
                            <button class="btn btn-sm btn-primary" onclick="memberCenter.editArticle('${e.id}')">
                                <i class="fa fa-edit"></i> 修改
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="memberCenter.deleteItem('article', '${e.id}')">
                                <i class="fa fa-trash"></i> 删除
                            </button>
                        </div>
                    </div>
                </div>
            `;t.append(e)})}renderMumblesMobileCards(e){let t=$("#mumblesMobileCards");t.empty(),e.forEach(e=>{e=`
                <div class="mobile-card">
                    <div class="mobile-card-row">
                        <div class="mobile-card-label">内容</div>
                        <div class="mobile-card-content markdown-body">${this.converter.makeHtml(e.markdown)}</div>
                    </div>
                    <div class="mobile-card-row">
                        <div class="mobile-card-label">点赞数</div>
                        <div class="mobile-card-content">${e.like}</div>
                    </div>
                    <div class="mobile-card-row">
                        <div class="mobile-card-label">评论数</div>
                        <div class="mobile-card-content">${e.commentCount}</div>
                    </div>
                    <div class="mobile-card-row">
                        <div class="mobile-card-label">发布时间</div>
                        <div class="mobile-card-content">${this.formatDefaultDateTime(e.createTime)}</div>
                    </div>
                    <div class="mobile-card-row">
                        <div class="mobile-card-label">操作</div>
                        <div class="mobile-card-actions">
                            <button class="btn btn-sm btn-primary" onclick="memberCenter.editMumble('${e.id}')">
                                <i class="fa fa-edit"></i> 修改
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="memberCenter.deleteItem('mumble', '${e.id}')">
                                <i class="fa fa-trash"></i> 删除
                            </button>
                        </div>
                    </div>
                </div>
            `;t.append(e)})}renderTimelineMobileCards(e){let t=$("#timelineMobileCards");t.empty(),e.forEach(e=>{e=`
                <div class="mobile-card">
                    <div class="mobile-card-row">
                        <div class="mobile-card-label">标题</div>
                        <div class="mobile-card-content">${e.title}</div>
                    </div>
                    <div class="mobile-card-row">
                        <div class="mobile-card-label">内容</div>
                        <div class="mobile-card-content markdown-body">
                            ${this.converter.makeHtml(e.content)}
                        </div>
                    </div>
                    <div class="mobile-card-row">
                        <div class="mobile-card-label">时间轴日期</div>
                        <div class="mobile-card-content">${moment(e.date).format("YYYY/MM/DD")}</div>
                    </div>
                    <div class="mobile-card-row">
                        <div class="mobile-card-label">更多链接</div>
                        <div class="mobile-card-content">
                            ${e.more?`<a href="${e.more}" target="_blank">查看详情</a>`:"-"}
                        </div>
                    </div>
                    <div class="mobile-card-row">
                        <div class="mobile-card-label">发布时间</div>
                        <div class="mobile-card-content">${this.formatDefaultDateTime(e.createTime)}</div>
                    </div>
                    <div class="mobile-card-row">
                        <div class="mobile-card-label">操作</div>
                        <div class="mobile-card-actions">
                            <button class="btn btn-sm btn-primary" onclick="memberCenter.editTimeline('${e.id}')">
                                <i class="fa fa-edit"></i> 修改
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="memberCenter.deleteItem('timeline', '${e.id}')">
                                <i class="fa fa-trash"></i> 删除
                            </button>
                        </div>
                    </div>
                </div>
            `;t.append(e)})}renderPhotosMobileGrid(e){let t=$("#photosMobileGrid");t.empty(),e.forEach(e=>{e=`
                <div class="mobile-photo-card">
                    <img src="${e.accessUrl}!albums" alt="${e.description}" class="mobile-photo-image">
                    <div class="mobile-photo-info">
                        <div class="mobile-photo-title">${e.description}</div>
                        <div class="mobile-photo-meta">${new Date(e.uploadTime).toLocaleString()}</div>
                        <div class="mobile-photo-tags">
                            ${e.tags.map(e=>`<span class="photo-tag">${e}</span>`).join("")}
                        </div>
                        <div class="mobile-photo-actions">
                            <button class="btn btn-sm btn-primary" onclick="memberCenter.editPhoto('${e.id}')">
                                <i class="fa fa-edit"></i> 修改
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="memberCenter.deleteItem('photo', '${e.id}')">
                                <i class="fa fa-trash"></i> 删除
                            </button>
                        </div>
                    </div>
                </div>
            `;t.append(e)})}formatDefaultDateTime(e){return moment(e).format("YYYY/MM/DD HH:mm:ss")}formatDefaultDate(e){return e?moment(e).format("YYYY-MM-DD"):""}}let memberCenter=null;$(document).ready(()=>{try{memberCenter=new MemberCenter,window.memberCenter=memberCenter,console.log("个人中心初始化成功")}catch(e){console.error("个人中心初始化失败:",e);var t="系统初始化失败，请刷新页面重试";"function"==typeof memberCenter?.showMessage?memberCenter.showMessage(t,"error"):alert(t)}}),$(window).on("beforeunload",()=>{try{memberCenter&&(memberCenter.resetRecordingState(),memberCenter.recordingState.recordingTimer&&clearInterval(memberCenter.recordingState.recordingTimer),memberCenter.recordingState.playbackTimer)&&clearInterval(memberCenter.recordingState.playbackTimer)}catch(e){console.error("页面清理失败:",e)}}),window.addEventListener("error",e=>{console.error("全局错误:",e.error);try{memberCenter&&"function"==typeof memberCenter.showMessage&&memberCenter.showMessage("系统出现错误，请刷新页面","error")}catch(e){console.error("错误处理失败:",e)}}),window.addEventListener("unhandledrejection",e=>{console.error("未处理的Promise拒绝:",e.reason);try{memberCenter&&"function"==typeof memberCenter.showMessage&&memberCenter.showMessage("系统出现异步错误","error")}catch(e){console.error("Promise拒绝处理失败:",e)}e.preventDefault()});
//# sourceMappingURL=member.min.js.map